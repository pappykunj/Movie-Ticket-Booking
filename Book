struct book
{
    int code;
	char name[20];
	char date[20];
	int cost;
    struct book *next;
};

struct book* head=NULL;

void insertfront() 
{
    struct book*newnode;
    newnode=(struct Node*)malloc(sizeof(struct Node))
    printf("\nEnter movie code:");
    scanf("%d",newnode->code);
    printf("\nEnter name: ") ;
    scanf("%s",newnode->name) ;
    printf("\nEnter release date: ") ;
    scanf("%s",newnode->date) ;
    printf("\nEnter ticket price: ") ;
    scanf("%s",newnode->cost) ;
    

    newnode->link=NULL;
    if(head==NULL)
        head=newnode;
    else
    {
        newnode->link=head;
        header=newnode;
    }
    printf("\nSuccessfully inserted");
}
void traverse()
{
    struct book *temp;
    temp=head;
    if(head==NULL)
    {
        printf("List is empty..\n");
        return;
    }
    while(temp!=NULL)
    {
        printf("%d ->" ,temp->code);
	printf("%s ->" ,temp->name);
	printf("%s ->" ,temp->date);
	printf("%d " ,temp->cost);
	printf("/n");
        temp=temp->link;
    }
    printf("NULL\n");
}
void search()
{   
    struct book *temp;
    int code;
    int flag=-1,ele;
    printf("Enter the code to be searched:");
    scanf("%d",&ele);
    if(head==NULL)
    {
        printf("\nList is empty...\n");
        return;
    } 
    else
    {
        temp=head;
        while(temp->link!=NULL)
        {
            temp=temp->link;
            if(temp->code==ele)
            {
                flag=0;
                break;
            }
        }
        if(flag==-1)
            printf("The record not existing...\n");
        else
	{
	    printf("\n Record Found\n");
	    printf("\n\t\tCode ::%d",temp->code);
	    printf("\n\t\tmovie name ::%s",temp->name);
	    printf("\n\t\tmovie date ::%s",temp->date);
	    printf("\n\t\tprice of ticket ::%d",temp->cost);
	    printf("\n");
	}
            
    }
}
#include <stdio.h>
#include <malloc.h>
#include<string.h>

struct person
{
    char name[50];
    struct person *next;
};

struct ticket
{
char number[50];
struct ticket *next;
};

struct person* create_person(char *);
struct ticket* create_ticket(char *);

void insert_person();
void insert_ticket();
void display_persons();
void display_tickets();

struct person *newperson;
struct person *ptrPerson;
struct ticket *newticket;
struct ticket *ptrTicket;

struct person * firstPerson = NULL;
struct person * lastPerson = NULL;
struct ticket * firstTicket = NULL;
struct ticket * lastTicket = NULL; 

int main()
{
int ch;
char ans = 'Y';

while (ans == 'Y'||ans == 'y')
{
printf("\n---------------------------------\n");
printf("\nOperations on Ticket & Queue\n");
printf("\n---------------------------------\n");
printf("\n1. Add Person in Q");
	printf("\n2. Add ticket");
printf("\n3.Display All Persons in Q:");
	printf("\n4.Display All Tickets");
printf("\n10.Exit\n");
printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
printf("\nEnter your choice : ");
scanf("%d", &ch);

switch (ch)
{
case 1: 
    printf("\n...Adding Person in Q...\n");
    insert_person();
    break;

  case 2: 
    printf("\n...Adding Ticket...\n");
    insert_ticket();
    break;	
case 3: 
    printf("\n...Displaying Persons in Q From Beginning to End : \n");
    display_persons();
    break;
case 4: 
    printf("\n...Displaying Tickets From Beginning to End :\n");
    display_tickets();
    break;
		
case 10: 
    printf("\n...Exiting...\n");
    return 0;
    break;
default: 
    printf("\n...Invalid Choice...\n");
    break;
}
printf("\n\n You want to continue (Y/N)");
scanf(" %c", &ans);
}
return 0;
 }
 
struct person* create_person(char *ptrName)
{
newperson = (struct person *)malloc(sizeof(struct person));
if (newperson == NULL)
{
printf("\nMemory was not allocated");
return 0;
}
else
{
strcpy(newperson->name, ptrName);
newperson->next = NULL;
return newperson;
}
}
 
struct ticket* create_ticket(char *tktNumber)
{
newticket = (struct ticket *)malloc(sizeof(struct ticket));
if (newticket == NULL)
{
printf("\nMemory was not allocated");
return 0;
}
else
{
strcpy(newticket->number, tktNumber);
newticket->next = NULL;
return newticket;
}
}

 
void insert_person()
{
char val[50];

printf("\nEnter the name of person : ");    
scanf("%s", val);
newperson = create_person(val);
if (firstPerson == lastPerson && lastPerson == NULL)
{
firstPerson = lastPerson = newperson;
firstPerson->next = NULL;
lastPerson->next = NULL;
}
else
{
lastPerson->next = newperson;
lastPerson = newperson;
lastPerson->next = NULL;
}
printf("\n----INSERTED----");
}    

void insert_ticket()
{
char val[50];

printf("\nEnter the number of ticket : ");    
scanf("%s", val);
newticket = create_ticket(val);
if (firstTicket == lastTicket && lastTicket == NULL)
{
firstTicket = lastTicket = newticket;
firstTicket->next = NULL;
lastTicket->next = NULL;
}
else
{
lastTicket->next = newticket;
lastTicket = newticket;
lastTicket->next = NULL;
}
 printf("\n----INSERTED----");
} 

void display_persons()
{
if (firstPerson == NULL)
{

printf(":No Person in the list to display\n");
}
else
{
for (ptrPerson = firstPerson; ptrPerson != NULL;ptrPerson = ptrPerson->next)
{    
  printf("%s\t", ptrPerson->name);
}
}
}

void display_tickets()
{
if (firstTicket == NULL)
{
printf(":No Ticket in the list to display\n");
}
else
{
for (ptrTicket = firstTicket; ptrTicket != NULL;ptrTicket = ptrTicket->next)
{    
    printf("%s\t", ptrTicket->number);
}
}
} 
